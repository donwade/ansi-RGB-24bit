#!/bin/bash
# there are 3 different ways to set ansi colored text.

# method 1: use hard fixed 16 colors
#        2: use a colormap, giving 256 user programmable colors.
#        3: explict RGB each color is 8bits wide.
#

# method 2 :If color code is prefixed by >>> 38;5 <<<< it is interpreted as use the 256 colormap
#           E.g. \e[38;5;91m will color following text purple, 
# 
# method 1 :but no >>> 38;5 <<< means just old classic hard predefined 16 colour set
#           E.g.  \e[91m will indicate simple bright red.
#-------------------------------------------------------------------------------------------
ESC_FGND="\e[38;2"   #start of escape sequence
ESC_BGND="\e[48;2"   #start of escape sequence
CSE="m"         #end of sequence
typeset -A color_map

TEMP=$(mktemp).tmp
cat /etc/X11/rgb.txt | sort -k4 > $TEMP

#-------------------------------------------------------------------------------------------
function show_colorsRGB 
{
    reset
    while read -r RED GREEN BLUE NAME IGNORE; do
        [[ -z "$IGNORE"  ]] ||  continue # param 5 exists? Indicates names with spaces! DROP'em
    
        SEQUENCE="${ESC_FGND};${color_map["$NAME"]}${CSE}"
        printf '\n%b %20s =\t%s' $SEQUENCE  $NAME $SEQUENCE 
    done < $TEMP
    echo
}
#-------------------------------------------------------------------------------------------

function generate_lookup()
{
    while read -r RED GREEN BLUE NAME IGNORE; do
      
        [[ -z "$IGNORE"  ]] ||  continue # param 5 exists? Indicates names with spaces! DROP'em
    
        #--------------------------------------------------------------
        # if you want the xterm color format #RRGGBB use below
    
        # -v means flip printf into sscanf
        # each input param (RED GREEN BLUE) will be converted into hex as per %02X
        # printf works on each variable one by one.
        # on each conversion, the output variable BIGHEX is auto-shifted by 8Bits
        # the converted input variable is OR'd into the BIGHEX.
        # So, it really automatically makes a 24Bit hex number ..... cool
    
        #printf -v BIGHEX %02x $RED $GREEN $BLUE 
        #printf "$BIGHEX "
    
        #printf "$RED $GREEN $BLUE $NAME\n"
        #color_map[$NAME]=$BIGHEX
    
        # just do a stardard ANSI 24bit color declaration
        #echo "$NAME"; sleep 1
    
        #--------------------------------------------------------------
    
        # just capture the RGB sequence and put it in map of key name "NAME"
        color_map[$NAME]="$RED;$GREEN;$BLUE"
    
    done < $TEMP
    
    color_map["default"]="128,50,155"  # NO SPACES!!!!!
    
    #declare -p color_map   #raw dump map for debugging
}

#-------------------------------------------------------------------------------------------
function set_foreground()
{
    if [ "$1" == "" ]; then
        RED "index $1 not provided"
        sleep 10
        return 1
    fi

    LOOKUP=${color_map["$1"]}

    if [ "$LOOKUP" == "" ]; then
        BLINK_RED "no such color name $1"
        sleep 10000
        return 1
    fi

    SEQUENCE="${ESC_FGND};$LOOKUP${CSE}"
    printf '%b %20s =\t%s\n' $SEQUENCE  $1 "SEQUENCE"
    return 0
}

export -f set_foreground
#-------------------------------------------------------------------------------------------
function set_background()
{
    if [ "$1" == "" ]; then
        RED "index $1 not provided"
        sleep 10
        return 1
    fi

    LOOKUP=${color_map["$1"]}

    if [ "$LOOKUP" == "" ]; then
        BLINK_RED "no such color name $1"
        sleep 10000
        return 1
    fi

    SEQUENCE="${ESC_BGND};$LOOKUP${CSE}"
    printf '%b %20s =\t%s\n' $SEQUENCE  $1 "SEQUENCE"
    return 0
}

export -f set_background

#-------------------------------------------------------------------------------------------

[[ "$1" == "" ]] && generate_lookup

show_colorsRGB 
set_foreground "wheat4"
set_background "SpringGreen"
echo

rm  $TEMP
